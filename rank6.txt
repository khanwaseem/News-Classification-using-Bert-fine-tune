import torch
import torch.nn as nn
import torch.optim as optim
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from torch.utils.data import Dataset, DataLoader

# Load dataset
df = pd.read_csv("your_data.csv")

# Encode categorical variables
le_fault_code = LabelEncoder()
df["fault_code"] = le_fault_code.fit_transform(df["fault_code"])

le_vehicle = LabelEncoder()
df["vehicle_configuration"] = le_vehicle.fit_transform(df["vehicle_configuration"])

# Convert textual data into numerical embeddings using TF-IDF
vectorizer = TfidfVectorizer(max_features=200)
tfidf_matrix = vectorizer.fit_transform(df["customer_complaint"]).toarray()

# Normalize numerical features
scaler = StandardScaler()
df[["vehicle_configuration"]] = scaler.fit_transform(df[["vehicle_configuration"]])

# Prepare feature matrix
X = np.hstack((df[["vehicle_configuration", "fault_code"]].values, tfidf_matrix))
y = df["repair_success"].values  # 1 (successful repair), 0 (not successful)

# Convert data into PyTorch Dataset
class FaultCodeDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32)
        self.y = torch.tensor(y, dtype=torch.float32).unsqueeze(1)  # Reshape for BCE Loss

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

# Create dataset and dataloader
dataset = FaultCodeDataset(X, y)
dataloader = DataLoader(dataset, batch_size=64, shuffle=True)

# Define Pointwise Ranking Model
class RankingModel(nn.Module):
    def __init__(self, input_dim):
        super(RankingModel, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(input_dim, 128),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(64, 1)  # Output ranking score
        )

    def forward(self, x):
        return self.fc(x)

# Initialize model, loss function, and optimizer
model = RankingModel(input_dim=X.shape[1])
criterion = nn.BCEWithLogitsLoss()  # Pointwise ranking with probability output
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
epochs = 10
for epoch in range(epochs):
    total_loss = 0
    for X_batch, y_batch in dataloader:
        optimizer.zero_grad()
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {total_loss / len(dataloader)}")

# Save the model
torch.save(model.state_dict(), "pointwise_ranking_model.pth")

